# Retrieve instance connection name from the previous step
spring.cloud.gcp.sql.instance-connection-name=mythic-chalice-396221:asia-northeast3:mydbtesting
spring.cloud.gcp.sql.database-name=Products
#spring.cloud.gcp.credentials.location=/root/.config/gcloud/application_default_credentials.json


# Cloud SQL starter automatically configures the JDBC URL

# Configure username/password
#spring.datasource.username=hyerims-db
#spring.datasource.password=hyerim12

# Configure connection pooling if needed
#spring.datasource.hikari.maximum-pool-size=10

# So app starts despite "table already exists" errors.
#spring.datasource.continue-on-error=true
# Enforces database initialization
#spring.datasource.initialization-mode=always



#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.jpa.hibernate.ddl-auto=create
#spring.jpa.properties.hibernate.format_sql=true
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
#spring.jpa.generate-ddl=true
#logging.level.org.hibernate.SQL=debug
#logging.level.org.hibernate.type.descriptor.sql=trace
#server.port=8080


spring.datasource.url=jdbc:mysql://google/Products?cloudSqlInstance=mythic-chalice-396221:asia-northeast3:mydbtesting&socketFactory=com.google.cloud.sql.mysql.SocketFactory
spring.jpa.properties.hibernate.default_schema = public
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto = update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect